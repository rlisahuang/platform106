#!/usr/bin/python2.7
'''
Platform 106 -- Alpha Version
Authors: Lisa Huang, Shrunothra Ambati, Jocelyn Shiue
Date: 05/13/2019

app.py
The main file of the app.
'''

from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory,jsonify)
from werkzeug.utils import secure_filename
from twilio.rest import Client


app = Flask(__name__)

import datetime

import info
import sys,os
import bcrypt
import MySQLdb
import imghdr

app = Flask(__name__)
app.secret_key = 'draft'

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

app.config['UPLOADS'] = 'uploads'
# app.config['MAX_UPLOAD'] = 256000 -- 1.4 MB
app.config['MAX_UPLOAD'] = 1572864 # -- 1.5 MB
# app.config['MAX_UPLOAD'] = 2097152 -- 2.0 MB

@app.route('/')
def home():
    conn = info.getConn('c9')
    featuredEvents = info.getFeaturedEvents(conn)
    print (featuredEvents)
    username = session.get('username')

    for event in featuredEvents:
        starred = info.isStarred(conn,event['pid'],username)
        event["starred"] = "0" if starred is None else "1"
    
    return render_template('home.html', title="Home", featuredEvents = featuredEvents, logged_in=session.get('logged_in',False))

@app.route('/FAQ')
def FAQ():
    conn = info.getConn('c9')
    featuredEvents = info.getFeaturedEvents(conn)
    print (featuredEvents)
    username = session.get('username')

    for event in featuredEvents:
        starred = info.isStarred(conn,event['pid'],username)
        event["starred"] = "0" if starred is None else "1"
    
    return render_template('FAQ.html', title="FAQ Page", featuredEvents = featuredEvents, logged_in=session.get('logged_in',False))

    
@app.route('/login/')
def login():
    return render_template('login.html', title = "Login", logged_in=session.get('logged_in',False))
    
@app.route('/tagsList/',defaults={'tag':''})
@app.route('/tagsList/<tag>/')
def tagsList(tag):
    logged_in = session.get('logged_in', False)
    if not logged_in: # the link is only available after the user is logged in
        flash("Please log in!")
        return redirect(url_for("login"))
    
    conn = info.getConn('c9')
    tags = info.getTags(conn, tag) # return all tags that contain the keyword `tag`

    # update each tag dictionary with info indicating 1) whether it is followed by
    # this user, 2) how many posts that use this tag and 3) how many followers
    # in total
    for tag in tags:
        followed = info.isFollowed(conn, tag['tid'], session.get('username'))
        followed = "0" if followed is None else "1"
        tag['followed'] = followed

    return render_template('tagsList.html', isAdmin = session.get('admin',False), title = "Tags List", tags=tags, logged_in=logged_in)
 
# url for tags search FORM (in tagsList page)        
@app.route('/tagsSearch',methods=['POST'])
def tagsSearch():
    if request.method == 'POST':
        tag = request.form.get('searchtags','')
        return redirect(url_for("tagsList",tag=tag))
        
    return redirect(request.referrer)
    
@app.route('/userPortal/')
def userPortal():
    logged_in = session.get('logged_in', False)
    if not logged_in: # the link is only available after the user is logged in
        flash("Please log in!")
        return redirect(url_for("login"))
    
    conn = info.getConn('c9')
    usr=session.get('username')
    stars = info.displayStarredEvents(conn,usr)
    posts = info.displayPostsByUser(conn,usr)
    follows = info.displayFollowedTags(conn,usr)
  
    # update each star with explicit string indicating whether the post is starred by the user
    for star in stars:
        star['starred'] = "1"
    
    # update each tag with explicit string indicating whether the tag is followed by the user        
    for follow in follows:
        follow['followed'] = "1"

    return render_template('userPortal.html', isAdmin=session.get('admin',False),title = "User Portal", stars=stars,
                        posts=posts, follows=follows, username=usr,logged_in=logged_in)

@app.route('/userPortal/updateProfile/', methods=['GET','POST'])
def updateProfile():
    ''' Collects contact information from users '''
    logged_in = session.get('logged_in', False)
    if not logged_in: # the link is only available after the user is logged in
        flash("Please log in!")
        return redirect(url_for("login"))
    
    # information from database
    conn = info.getConn('c9')
    usr=session.get('username')
    oldNum = info.getUserPhone(conn,usr)
    oldEmail = info.getUserEmail(conn,usr)
    
    if request.method == "GET":
        # set up the page and pre-fill the form using info from database
        num = "" if oldNum is None else oldNum
        email = "" if oldEmail is None else oldEmail
        return render_template('updateProfile.html', num=num, email=email, logged_in=session.get('logged_in',False))
        
    else:
        # the update function, grab info filled in by the user
        newNum = request.form.get("phoneNum")
        newEmail = request.form.get("email")

        if len(newNum) != 10: 
            flash("Please provide a valid US phone number with exactly 10 digits.")
            return redirect(url_for('updateProfile'))
        try:
            numericForm = int(newNum)
            info.updateUserPhone(conn, usr, newNum)
            print("Phone number of ({}) was updated successfully.".format(usr))
            info.updateUserEmail(conn, usr, newEmail)
            print("Email of ({}) was updated successfully.".format(usr))
            return redirect(url_for('updateProfile'))
        except Exception as err:
            flash("Invalid phone number:{why}".format(why=err))
            return redirect(url_for('updateProfile'))


@app.route('/createPost', methods=['GET','POST'])
def createPost():
    logged_in = session.get('logged_in', False)
    if not logged_in: # the link is only available after the user is logged in
        flash("Please log in!")
        return redirect(url_for("login"))
    conn = info.getConn('c9')
    if request.method == 'GET':
        #blank form rendered when page is first visited
        return render_template('createPost.html', 
                          title="Create a Post!",post=None, logged_in=logged_in)
                          
    else:
        #flash warning messages if form is filled out incorrectly

        title = request.form.get('post-title','')
        content = request.form.get('post-content','')
        location = request.form.get('post-location','')
        event_time = request.form.get('post-eventtime','')
        event_date = request.form.get('post-eventdate','')
        tags = request.form.get('post-tags','')
        picture = request.files.get('post-picture',None)
        print type(picture)
        print picture

        newpost = {"title":title,"content":content,"location":location,
                "event_time":event_time,"event_date":event_date, "tags":tags,'picture':picture}
    
        error = checkRequiredInfo(title,location,event_date,event_time)

        # test if any errors occured then take user back to insert page, with 
        # the info that they already provided prefilled
        if error:
            return render_template('createPost.html', title="Create a Post!",post=newpost, logged_in=logged_in)
        
        else: 
            # first insert the post without picture, because we need the pid
            tags_stripped = [tag.strip() for tag in tags.split(",")]
            pid = info.insertPost(conn, title, content, location, event_time, event_date, tags_stripped, session.get('username'))
            
            # picture is optional
            if picture is None:

                return redirect(url_for('displayPost', pid=pid))
            else:
                # if picture is provided, try uploading
                
                try: #Handing the image uploading
                    fsize = os.fstat(picture.stream.fileno()).st_size
                    if fsize > app.config['MAX_UPLOAD']:
                        raise Exception('File is too big')
                    mime_type = imghdr.what(picture)
                    if mime_type.lower() not in ['jpeg','gif','png']:
                        raise Exception('Not a JPEG, GIF or PNG: {}'.format(mime_type))
                    filename = secure_filename("{}.{}".format(pid,mime_type))
                    pathname = os.path.join(app.config['UPLOADS'],filename)
                    picture.save(pathname)
                    
                    conn = info.getConn('c9')
                    curs = conn.cursor()
                    # upload existing record with the provided picture
                    curs.execute('''UPDATE posts 
                                    SET imagefile = %s
                                    WHERE pid = %s''',
                                 [filename, pid])
                                #test if any errors occured then take user back to insert page
                    conn.commit()
                
                
                    return redirect(url_for('displayPost', pid=pid))
            
                except Exception as err:
                    flash('Redirecting to update page: Picture upload failed {why}'.format(why=err))
                    # redirect to the update page to re-upload the picture 
                    return redirect(url_for('updatePost',pid=pid))

                
# helper function that checks if all required information is provided
def checkRequiredInfo(title, location, event_date, event_time):
    error = False
    
    if title == "":
        flash('Missing value: Please enter a title for your event!')
        error = True
    if location == "":
        flash('Missing value: Please enter a location for your event!')
        error = True
    if event_date == "":
        flash('Missing value: Please enter a date for your event!')
        error = True
    if event_time == "":
        flash('Missing value: Please enter a time for your event!')
        error = True
        
    return error

# url for post page
@app.route('/posts/<int:pid>')
def displayPost(pid):
    ''' Allow users who are not logged_in to see the posts, with the star function disabled '''
    logged_in = session.get('logged_in', False)

    conn = info.getConn('c9')
    postInfo = info.readOnePost(conn,pid)
    
    if logged_in:
        username = session.get('username')
        starred = info.isStarred(conn,pid,username)
        isAuthor = info.isAuthor(conn,pid,username)
        postInfo["starred"] = "0" if starred is None else "1"
        authorEmail = info.getAuthorEmail(conn, postInfo['author'])
    
        return render_template('post.html',isAdmin=session.get('admin',False), authorEmail = authorEmail, isAuthor=isAuthor, post=postInfo,logged_in=logged_in)
    
    else:
        return render_template('post.html',post=postInfo,logged_in=logged_in)
   
@app.route('/pic/<pid>')
def pic(pid):
    ''' url for looking for picture in the file system with given pid '''
    conn = info.getConn('c9')
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select pid,imagefile from posts where pid = %s''', [pid])
    pic = curs.fetchone()['imagefile']
    if pic is None:
        # flash('No picture for {}'.format(pid))
        val = ""
    else:
        val = send_from_directory(app.config['UPLOADS'],pic)
    return val

 
@app.route('/updatePost/<int:pid>',methods=['GET','POST'])
def updatePost(pid):
    logged_in = session.get('logged_in', False)
    if not logged_in: # the link is only available after the user is logged in
        flash("Please log in!")
        return redirect(url_for("login"))
    conn = info.getConn('c9')
    # information from database
    post = info.readOnePost(conn,pid)
    time_obj = datetime.datetime.strptime(str(post['event_time']),'%H:%M:%S').time()
    post['event_time'] = str(time_obj)[:5] # hh:mm in 12-hour format
    oldtags = post.get('tags')
    
    if request.method == "GET":
        post['tags'] = ",".join(oldtags)
        return render_template('updatePost.html', post=post,logged_in=session.get('logged_in',False))
    
    else:
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute("""select * from twilio_info""")
        twilio_info = curs.fetchone()
        account_sid = twilio_info['account_sid']
        auth_token = twilio_info['auth_token']
        client = Client(account_sid, auth_token) # text msg client
        
        starredBy = info.getSubscriberPhoneNums(conn,pid)
        
        # the delete function, flash message and redirect to home page
        if request.form.get('submit') == 'delete':
            filename = post['imagefile']
            if filename is not None:
                os.remove(os.path.join(app.config['UPLOADS'], filename))
            info.deletePost(conn,pid)
            isAdmin = session.get('admin',False)
            if isAdmin:
                flash("Post ({}) was deleted successfully by ADMIN.".format(pid))
                print("Post ({}) was deleted successfully by ADMIN.".format(pid))
            else:
                flash("Post ({}) was deleted successfully.".format(pid))
                print("Post ({}) was deleted successfully.".format(pid))
            
            for user in starredBy:
                phoneNum = user['phoneNum']
                if phoneNum:
                    try:
                        message = client.messages.create(
                                    to="+1"+phoneNum, 
                                    from_="+18572675446",
                                    body="The event you starred: {event}, has been deleted.".format(event=post['title']))
                    except Exception as err:
                        print("SMS sent failed to {phoneNum}: {why}".format(phoneNum=phoneNum,why=err))
                        
            return redirect(url_for('userPortal'))
       
        # the update function, grab info filled in by the user
        else:
            title = request.form.get('post-title')
            content = request.form.get('post-content')
            location = request.form.get('post-location')
            date = request.form.get('post-eventdate')
            time = request.form.get('post-eventtime')
            newtags = request.form.get('post-tags','')
            picture = request.files.get('post-picture',None)
            
            error = checkRequiredInfo(title,location,date,time)
            
            if error:
                return render_template('updatePost.html', title="Update a Post!",post=post, logged_in=logged_in)

            if picture is None: # no new pic uploaded by user, use the existing pic (if any) by default
                conn = info.getConn('c9')
                curs = conn.cursor(MySQLdb.cursors.DictCursor)
                curs.execute('''select pid,imagefile from posts where pid = %s''', [pid])
                filename = curs.fetchone()['imagefile']

            else: # user uploaded a new pic
                try: #Handing the image uploading
                    fsize = os.fstat(picture.stream.fileno()).st_size

                    if fsize > app.config['MAX_UPLOAD']:
                        raise Exception('File is too big')
                    mime_type = imghdr.what(picture)
                    if mime_type.lower() not in ['jpeg','gif','png']:
                        raise Exception('Not a JPEG, GIF or PNG: {}'.format(mime_type))
                    filename = secure_filename("{}.{}".format(pid,mime_type))
                    print(filename)
                    pathname = os.path.join(app.config['UPLOADS'],filename)
                    picture.save(pathname)
                
                except Exception as err:
                    flash('Upload failed {why}'.format(why=err))
                    # should make the code cleaner later
                    if len(oldtags) == 0:
                        post['tags'] = ''
                    else:
                        post['tags'] = ",".join(oldtags)
                    return render_template('updatePost.html', 
                                      title="Update a Post!",post=post, logged_in=logged_in)
            
            tags_stripped = [tag.strip() for tag in newtags.split(",")]
            info.updatePost(conn,pid, title, content, location, filename,time,date,session.get('username'),oldtags,tags_stripped)
        
            print("Post ({}) was updated successfully.".format(pid))
            
            for user in starredBy:
                phoneNum = user['phoneNum']
                if phoneNum:
                    try:
                        message = client.messages.create(
                                    to="+1"+phoneNum, 
                                    from_="+18572675446",
                                    body="The event you starred: {event}, has been updated.".format(event=post['title']))
                    except Exception as err:
                        print("SMS sent failed to {phoneNum}: {why}".format(phoneNum=phoneNum,why=err))
                        
            return redirect(url_for('displayPost', pid=pid))
            
                                  
# url for simple search FORM
@app.route('/basicSearch',methods=['POST'])
def basicSearch():
    title = ''
    
    if request.method == 'POST':
        title = request.form.get('searchterm')
        # save the keyword and tags in session to be displayed in generalFeed
        session['keyword'] = title
        session['tags'] = ''

        return redirect(url_for("generalFeed"))
        
    return redirect(request.referrer)

# url for advanced search FORM (in a search page)        
@app.route('/advancedSearch',methods=['POST'])
def advancedSearch():
    if request.method == 'POST':
        title = request.form.get('searchterm','')
        tags = request.form.get('searchtags','')
        # save the keyword and tags in session to be displayed in generalFeed
        session['keyword'] = title
        session['tags'] = tags
        
        # event time, location... more to follow
        return redirect(url_for("generalFeed"))
    return redirect(request.referrer)

# url that hosts the advanced search form as well as search results    
@app.route('/generalFeed/')
def generalFeed():
    ''' Allows users who are not logged_in to see the general feed, with star function disabled '''
    logged_in = session.get('logged_in', False)
    keyword = session.pop('keyword','')
    tags = session.pop('tags','')
    conn = info.getConn('c9')
    posts = info.searchPosts(conn,keyword,tags)
    tagHolder = "enter tags separated by comma: e.g. cs, club" if (tags != '') else tags
    
    if logged_in:
        for post in posts:
            isStarred = info.isStarred(conn,post['pid'],session.get('username'))
            print(isStarred)
            post['starred'] = "0" if isStarred is None else "1"
            print(post)
            isTomorrow = info.isEventDayTomorrow(conn, post['pid'])
            post['tomorrow'] = "0" if isTomorrow is False else "1"
            print(isTomorrow)
    
    return render_template('generalFeed.html',title = "General Feed", keyword=keyword,tags=tagHolder,posts=posts,logged_in=session.get('logged_in',False))    

    
# url that hosts the advanced search form as well as search results    
@app.route('/searchTag/<tag>')
def searchTag(tag):
    session['tags'] = tag
    return redirect(url_for("generalFeed"))

@app.route('/join/', methods=["POST"])
def join():
    try:
        username = request.form['username']
        passwd1 = request.form['password1']
        passwd2 = request.form['password2']
        if passwd1 != passwd2:
            flash('passwords do not match')
            return redirect( url_for('login'))
        hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
        conn = info.getConn('c9')
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        # deal with threading races
        try:
            curs.execute('INSERT into accounts(username,hashed) VALUES(%s,%s)',
                     [username, hashed])
            conn.commit()
        except MySQLdb.IntegrityError as err:
            flash('That username is taken')
            return redirect(url_for('login'))
            
        session['username'] = username
        session['logged_in'] = True
        return redirect( url_for('userPortal') )
        
    except Exception as err:
        flash('form submission error '+str(err))
        return redirect( url_for('login') )
        
@app.route('/loginAction/', methods=["POST"])
def loginAction():
    try:
        username = request.form['username']
        passwd = request.form['password']
        conn = info.getConn('c9')
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute('SELECT hashed FROM accounts WHERE username = %s',
                     [username])
        row = curs.fetchone()
        if row is None:
            flash('login incorrect. Try again or join')
            return redirect( url_for('index'))
        hashed = row['hashed']
        # strings always come out of the database as unicode objects
        if bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8')) == hashed:
            if request.form.get('login-btn') == 'Login as User':
                flash('successfully logged in as '+username)
                session['username'] = username
                session['logged_in'] = True
                return redirect( url_for('userPortal') )
            else:
                curs.execute("""select isAdmin from accounts where username = %s""",
                                [username])
                isAdmin = curs.fetchone().get('isAdmin')
                if isAdmin:
                    flash('successfully logged in as ADMIN '+username)
                    session['username'] = username
                    session['logged_in'] = True
                    session['admin'] = True
                    return redirect( url_for('userPortal') )
                else:
                    flash('login as ADMIN incorrect. Try again or join')
                    return redirect( url_for('login'))
        else:
            flash('login incorrect. Try again or join')
            return redirect( url_for('login'))
    except Exception as err:
        flash('form submission error '+str(err))
        return redirect( url_for('login') )

@app.route('/logout/')
def logout():
    try:
        if 'username' in session:
            username = session['username']
            session.pop('username')
            session.pop('logged_in')
            session.pop('admin','')
            flash('You are logged out')
            return redirect(url_for('home'))
        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('login') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('login') )
        
""" The route for star/unstar post with ajax """     
@app.route('/starAjax',methods=['POST'])      
def starAjax():
    if request.method == 'POST':
        conn = info.getConn('c9')
        usr = session.get('username')
        pid = request.form.get('pid')
        starred = request.form.get('starred')
        usrPhone = info.getUserPhone(conn, usr)
        print(usrPhone)
        usrEmail = info.getUserEmail(conn, usr)
        print(usrEmail)
    
        # Users cannot see the starring feature if they are not logged in, so it is redundant to add an additional if condition here.

        print(starred)
        print(type(starred))
        if starred == "0":
            info.starPost(conn,pid,usr)
            print("post {} is starred by user {}".format(pid,usr))
            return jsonify( {'error':False, 'pid': pid, 'starred': "1"} )
        else:
            
            info.unstarPost(conn,pid,usr)
            print("post {} is unstarred by user {}".format(pid,usr))
            return jsonify( {'error':False, 'pid': pid, 'starred': "0"} )

""" The route for follow/unfollow tag with ajax """     
@app.route('/followAjax',methods=['POST'])      
def followAjax():
    if request.method == 'POST':
        conn = info.getConn('c9')
        usr = session.get('username')
        tid = request.form.get('tid')
        followed = request.form.get('followed')
        print(followed)
        usrPhone = info.getUserPhone(conn, usr)
        usrEmail = info.getUserEmail(conn, usr)
    
        # Users cannot see the follow feature if they are not logged in, so it is redundant to add an additional if condition here.
        if followed == "0":
            print(tid)
            print(usr)
            numFollows = info.followTag(conn,tid,usr)['num_followers']
            print("post {} is followed by user {}".format(tid,usr))
            return jsonify( {'error':False, 'tid': tid, 'followed': "1", 'numFollows': numFollows} )
        else:
            numFollows = info.unfollowTag(conn,tid,usr)['num_followers']
            print("post {} is unfollowed by user {}".format(tid,usr))
            return jsonify( {'error':False, 'tid': tid, 'followed': "0", 'numFollows': numFollows} )
 
            
""" The route for deleting a tag (ONLY BY ADMIN)"""
@app.route('/deleteTag/<tid>',methods=['POST'])
def deleteTag(tid):
    if request.method == "POST":
        isAdmin = session.get('admin',False)
        if not isAdmin:
            flash("please log in as ADMIN")
            print("please log in as ADMIN")
            return redirect(url_for("tagsList"))
        conn = info.getConn('c9')
        info.deleteTag(conn,tid)
        flash("tag {} successfully deleted".format(tid))
        print("tag {} successfully deleted".format(tid))
        return redirect(url_for("tagsList"))


if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0',8081)

#!/usr/bin/python2.7
'''
Platform 106 -- Alpha Version
Authors: Lisa Huang, Shrunothra Ambati, Jocelyn Shiue
Date: 05/13/2019

info.py
File that contains functions for the backend.
'''

import sys
import MySQLdb
import time
import datetime
import auth
import operator

def getConn(db):
    #conn = auth.mysqlConnectCNF(db='c9')
    conn = MySQLdb.connect(host='localhost',
                           user='ubuntu',
                           passwd='',
                           db=db)
    conn.set_character_set('utf8')
    curs = conn.cursor()
    curs.execute('set names utf8;')
    curs.execute('set character set utf8;')
    curs.execute('set character_set_connection=utf8;')
    return conn
    
#-------------------------------------------------------------------------------
# Methods needed for string character conversions

def utf8(val):
    return unicode(val,'utf8') if type(val) is str else val

def dict2utf8(dic):
    '''Because dictionaries are mutable,
    this mutates the dictionary;
    it also returns it'''
    for k,v in dic.iteritems():
        dic[k] = utf8(v)
    return dic

def tuple2utf8(tup):
    '''returns a new tuple, with byte strings
converted to unicode strings'''
    return tuple(map(utf8,tup))
    
def row2utf8(row):
    if type(row) is tuple:
        return tuple2utf8(row)
    elif type(row) is dict:
        return dict2utf8(row)
    else:
        raise TypeError('row is of unhandled type')

#-------------------------------------------------------------------------------
# Methods for getting information from, and updating the C9

def insertPost(conn, title, content, location, event_time, event_date, tags, username):
    '''
    Function that inserts a new post into the database and establish post-tag 
    relationships if given any tags.
    
    Potential Problem:
        1) The current implementation of the function assumes that titles are not 
    unique and does not prevent the user from creating a post with exactly the 
    same title and content as any existing post.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    val = (title, content, location, 0, None, event_time, event_date,username)
    # time_created based on mysql's now() function, but it is in UTC instead of
    # UTC-4 -- may have to fixed this later
    
    curs.execute("""INSERT INTO posts 
    (title, content, time_created, location, num_starred, imagefile, event_time, event_date,author) 
    VALUES (%s, %s, now(), %s, %s, %s, %s, %s,%s)""", val)
    conn.commit()

    curs.execute("""select LAST_INSERT_ID()""")
    previous_pid_dict = curs.fetchone()
    previous_pid = previous_pid_dict["LAST_INSERT_ID()"]
    print(previous_pid)
    
    curs.execute("""LOCK TABLES tags WRITE, tagged WRITE""")
    # inserting new tags into the tags table and linking the tag and post in the tagged table
    for tag in tags:
        if tag != "":
            curs.execute("""SELECT EXISTS(SELECT 1 from tags where tag_name = %s)""", [tag])
            tagExist = curs.fetchone().get("""EXISTS(SELECT 1 from tags where tag_name = '{}')""".format(tag))
            if not tagExist:
                curs.execute("""INSERT INTO tags (tag_name) VALUES (%s)""", [tag]) 
                conn.commit()
            curs.execute("""select tid from tags where tag_name = %s""", [tag])
            tag_id = curs.fetchone().get('tid')
            curs.execute("""INSERT INTO tagged (tid, pid) VALUES (%s, %s)""", (tag_id, previous_pid))
            conn.commit()
    curs.execute("""UNLOCK TABLES""")
    
    return previous_pid
    
def updatePost(conn, pid, title, content, location, imagefile, event_time, event_date,author,oldtags,newtags):
    '''
    Function that updates an existing post in the database, release existing post-tag relationships
    if any old tags are removed and establish new post-tag relationships if given any new tags.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)

    for tag in oldtags:
        curs.execute('''DELETE t1
                        FROM tagged t1
                        inner join tags t2
                        using (tid) 
                        where t1.pid = %s and t2.tag_name = %s''',[pid,tag])
        conn.commit()
    
    curs.execute("""LOCK TABLES tags WRITE, tagged WRITE""")
    for tag in newtags:
        if tag != "":
            curs.execute("""select tid from tags where tag_name = %s""", [tag])
            tag_id = curs.fetchone()
            if not tag_id:
                curs.execute("""INSERT INTO tags (tag_name) VALUES (%s)""", [tag]) 
                conn.commit()
                curs.execute("""select LAST_INSERT_ID()""")
                tid = curs.fetchone()["LAST_INSERT_ID()"]
            else:
                tid = tag_id['tid']
            curs.execute('''INSERT INTO tagged (tid,pid) values (%s,%s)''',(tid,pid))
            conn.commit()
    curs.execute("""UNLOCK TABLES""")
        
    sql = '''UPDATE posts 
            SET title = %s, content = %s, location = %s, imagefile = %s, event_time = %s, 
                event_date = %s, author=%s
            WHERE pid = %s'''
    val = (title, content, location, imagefile, event_time, event_date, author, pid)
    curs.execute(sql, val)
    conn.commit()
    
def deletePost(conn,pid):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)

    curs.execute("""delete from starred where pid = %s""",[pid])
    curs.execute("""delete from tagged where pid = %s""",[pid])
    curs.execute("""DELETE FROM posts WHERE pid = %s""", [pid])
    conn.commit()
    
    # delete tags that are not used by any posts entirely from the database
    curs.execute("""delete from followed where tid not in (select tid from tagged)""")
    curs.execute("""delete from tags where tid not in (select tid from tagged)""")
    conn.commit()
    
def deleteTag(conn,tid):
    # only admins have the authorization to delete tags
    curs = conn.cursor(MySQLdb.cursors.DictCursor)

    curs.execute("""delete from followed where tid = %s""",[tid])
    curs.execute("""delete from tagged where tid = %s""",[tid])
    curs.execute("""delete from tags where tid = %s""",[tid])
    conn.commit()
    
def readOnePost(conn,pid):
    ''' 
    Function to return all info regarding one post to be displayed in the 
    post page given the pid.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
        
    curs.execute('''select * from posts where pid = %s''',[pid])
    post = curs.fetchone()
    post['tags'] = []
    if post is not None: # check if the pid is valid. if so, update the tag information
        curs.execute('''select * from tags inner join tagged 
                        on tags.tid =tagged.tid where tagged.pid=%s''',[pid])
        tags = [tag.get('tag_name') for tag in curs.fetchall()]
        post['tags'] = tags
    return post
    
def searchPosts(conn,keyword='',tags=''):
    ''' 
    Function to return all posts containing the given keyword and tags to be 
    displayed in the result page.
    
    Potential Problems:
        The current implementation only allows for searching by keyword (basicSearch)
    or keyword+tags (advancedSearch). Potentially, we would also want to allow 
    users to search posts according to event date, location, etc. We would have loved this
    to occur in the beta version, but we didn't have time :(
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    if tags != '': # search with tags
        curs.execute('''select * from posts inner join tagged using (pid) 
                    inner join tags using (tid) 
                    where posts.title like %s and tags.tag_name like (%s)''', ["%"+keyword+"%","%"+tags+"%"])
    else: # search without tags
        curs.execute('''select * from posts where posts.title like %s''', ["%"+keyword+"%"])
                    
    posts = curs.fetchall()
    for p in posts:
        curs.execute('''select * from tags inner join tagged 
                        on tags.tid =tagged.tid where tagged.pid=%s''',[p.get('pid')])
        tags = [tag.get('tag_name') for tag in curs.fetchall()]
        p['tags'] = tags
        row2utf8(p)
    return posts

def isStarred(conn,pid,username):
    ''' This post is used to determine whether a post has been starred. It returns
        a dictionary with the pid and the username of the user if the user has
        starred that post. Otherwise, it returns an empty set. 
    '''
    curs = curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from starred where pid = %s and username = %s''',(pid,username))
    return curs.fetchone()
    
def starPost(conn,pid,username):
    ''' This function is used when a user wants to 'star' a post. It adds an entry
        to the starred table that shows that the user has starred that post. It 
        also updates the posts table to show the new number of stars that the 
        post has.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    starred = isStarred(conn,pid,username)
    if starred is None:
        curs.execute('''insert into starred (pid,username) values (%s, %s)''',(pid,username))
        conn.commit()
        curs.execute('''update posts set num_starred = num_starred + 1 where pid = %s''', (pid,))
        conn.commit()
    
def unstarPost(conn,pid,username):
    ''' This function is used when a user wants to 'unstar' a post. It removes
        the relationship between that user and the post they unstarred from the 
        starred table. It also updates the posts table to reflect the new number 
        of stars that that post has. 
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    starred = isStarred(conn,pid,username)
    if starred is not None:
        curs.execute('''delete from starred where pid = %s and username = %s''',(pid,username))
        conn.commit()
        curs.execute('''update posts set num_starred = num_starred - 1 where pid = %s''', (pid,))
        conn.commit()
    
def displayStarredEvents(conn,username):
    ''' This function returns all the events that are starred by a particular user.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from starred 
                    inner join posts using (pid) 
                    where starred.username = %s''',[username])
    return curs.fetchall()

def displayPostsByUser(conn,username):
    ''' This function returns all the posts where the user is also the author.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from posts 
                    where author = %s''',[username])
    return curs.fetchall()
    
def isAuthor(conn,pid,username):
    ''' This function is used to determine whether the user is the author of a 
        particular post. 
    '''
    curs = curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from posts where pid = %s and author = %s''',(pid,username))
    return (curs.fetchone() is not None)
    
def isFollowed(conn,tid,username):
    ''' This function is used to determine whether a particular tag is followed.
        It returns a dictionary with the tag id and the username of the user if
        the tag is followed, but returns an empty set if the user is not following
        that tag.
    '''
    curs = curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from followed where tid = %s and username = %s''',(tid,username))
    return curs.fetchone()
    
def followTag(conn,tid,username):
    ''' This function adds an entry to the followed table when a user follows a 
        particular tag. It also updates the tags table to reflect the number of 
        users that are following that tag.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    followed = isFollowed(conn,tid,username)
    if followed is None:
        curs.execute('''insert into followed (tid,username) values (%s, %s)''',(tid,username))
        conn.commit()
        curs.execute('''update tags set num_followers = num_followers + 1 where tid = %s''', (tid,))
        conn.commit()
    curs.execute('''select num_followers from tags where tid = %s''',[tid])
    return curs.fetchone()
        
        
def unfollowTag(conn,tid,username):
    ''' This function removes the relationship between a tag and a user when they
        decide to unfollow a tag. It also updates the tag table and subtracts 1
        from the number of followers of that particular tag.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    followed = isFollowed(conn,tid,username)
    if followed is not None:
        curs.execute('''delete from followed where tid = %s and username = %s''',(tid,username))
        conn.commit()
        curs.execute('''update tags set num_followers = num_followers - 1 where tid = %s''', (tid,))
        conn.commit()
    curs.execute('''select num_followers from tags where tid = %s''',[tid])
    return curs.fetchone()

def displayFollowedTags(conn,username):
    ''' This function returns a dictionary of all the tags followed by the user
        and the info associated with them, including number of followers and number of posts.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select t1.tid,username,tag_name,num_followers,num_posts from 
                        followed t1 
                            inner join 
                        tags t2 
                            on t1.tid = t2.tid 
                            inner join 
                        (select tid,count(*) as num_posts from tagged group by tid) t3 
                            on t2.tid = t3.tid
                        where username = %s''',[username])
    return curs.fetchall()

def getTags(conn, tag_name=''):
    ''' This function returns a dictionary of all the tags in the tags table including num_posts.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select t1.tid,tag_name,num_followers,num_posts from tags t1 
                    inner join 
                    (select tid,count(*) as num_posts from tagged group by tid) t2 
                    on t1.tid = t2.tid 
                    where tag_name like %s''',["%"+tag_name+"%"])
    allTags = curs.fetchall()
    
    return allTags


def getNumPostsThatUseTag(conn, tid):
    ''' This function returns that number of posts that use a particular tag.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select tid,count(*) from tagged where tid = %s group by tid''', (tid,))
    num = curs.fetchone()
    
    if num != None:
        return num['count(*)']
    else:
        return 0
    
def getSubscriberPhoneNums(conn,pid):
    ''' This function returns the phone numbers of all users who starred a certain event.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute("""select accounts.username, phoneNum from accounts 
                inner join starred on accounts.username = starred.username 
                where pid = %s""",[pid])

    return curs.fetchall()

def getUserPhone(conn,username):
    ''' This function returns the phone number of the user from the accounts 
        table.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select phoneNum from accounts where username = %s''',[username])
    phoneNum = curs.fetchone()
    
    return phoneNum['phoneNum']
    
def updateUserPhone(conn,username,newNum):
    ''' This function updates the user's phone number in the accounts table.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''update accounts set phoneNum = %s where username = %s''',(newNum,username))
    conn.commit()
    
def getUserEmail(conn,username):
    ''' This function returns the email of the user from the accounts 
        table.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select email from accounts where username = %s''',[username])
    email = curs.fetchone()
    
    return email['email']
    
def updateUserEmail(conn,username,newEmail):
    ''' This function updates the user's email address in the accounts table.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''update accounts set email = %s where username = %s''',(newEmail,username))
    conn.commit()
    
def getAuthorEmail(conn, author):
    ''' This function returns the email of the author of a post from the accounts 
        table.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select email from accounts where username = %s''',[author])
    email = curs.fetchone()
    
    return email['email']
    
def getTotalStarsByPost(conn,pid):
    ''' This function gets the total number of stars that each post has. 
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select pid, count(*) as stars from starred where pid = %s''',[pid])
    numStars = curs.fetchone()
    
    return numStars # {'pid': pid, 'stars': num_stars}
    
def getTotalStarsByUser(conn,username):
    ''' This function gets the total number of posts that each user has starred.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select username, count(*) as stars from starred where username = %s''',[username])
    numStars = curs.fetchone()
    
    return numStars # {'username': usr, 'stars': num_stars}
    
def getFeaturedEvents(conn):
    ''' This function gets the three posts with the highest number of 'stars' 
        because we want to feature events that students are most interested in
        on our home page. The function also uses an inner join to get the tags
        associated with each of those posts.
    '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute('''select * from posts order by num_starred desc limit 3''')
    featuredEvents = curs.fetchall()
    
    for p in featuredEvents:
        curs.execute('''select * from tags inner join tagged 
                        on tags.tid =tagged.tid where tagged.pid=%s''',[p.get('pid')])
        tags = [tag.get('tag_name') for tag in curs.fetchall()]
        p['tags'] = tags
        row2utf8(p)
        
    return featuredEvents

def isEventDayTomorrow(conn, pid):
    ''' Checks whether the event date of the given event is tomorrow '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    curs.execute("""select event_date from posts where pid = %s""", (pid,))
    datetime_db = curs.fetchone()
    
    event_date = datetime_db['event_date']
    tomorrow_date = datetime.date.today()+datetime.timedelta(days=1)
    
    if event_date == tomorrow_date:
        return True
    return False
    
def sortPosts(conn):
    ''' <PROBLEM>: This method intends to sort the events in General Feed, but does not
    work as expected. '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    
    unsortedPosts = searchPosts(conn)
    sortedPosts = sorted(unsortedPosts, key=lambda elem: elem['title'].lower)
    
    return sortedPosts
    
    
if __name__ == '__main__':
    conn = getConn('c9')
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    # posts = searchPosts(conn,keyword='f',tags='')
    # print(posts)
    # newpost = insertPost(conn,"testing_new_date_created", "testingfrompython", "tower", "5:01 pm", "2019-04-18")
    # print(newpost)
    #curs.execute("""SELECT EXISTS(SELECT 1 from tags where tag_name = %s)""", ['hello'])
    #test = curs.fetchone()["""EXISTS(SELECT 1 from tags where tag_name = '%s')""",('hello')]
    # print(isStarred(conn,10,'wendy'))
    # starPost(conn,10,'wendy')
    # print(isStarred(conn,10,'wendy'))
    # author18 = isAuthor(conn,18,'wanda')
    # print(author18) # true
    # author2 = isAuthor(conn,2,'wendy')
    # print(author2) # false
    # onePost = readOnePost(conn,19)
    # a =  onePost['event_time']
    # time_obj = datetime.datetime.strptime(str(a),'%I:%M:%S').time()
    # print(type(time_obj))
    # print(str(time_obj)[:5])

    # n = readOnePost(conn,1)
    # print(n)
    # curs.execute("""select event_time,event_date from posts where pid = 16""")
    # datetime_db = curs.fetchone()
    # print(type(datetime_db['event_time']))
    # print(datetime_db['event_time'])
    # print(type(datetime_db['event_date']))
    # print("event date is ")
    # print(datetime_db['event_date'])
    # print("today's date is ")
    # print(datetime.date.today())
    # print("tomorrow's date is ")
    # print(datetime.date.today()+datetime.timedelta(days=1))
    # print(datetime_db['event_date'] == datetime.date.today()+datetime.timedelta(days=1))
    
    curs.execute('''select pid,title from posts''')
    posts = curs.fetchall()
    # print(posts)
    unsortedPosts = [{'pid': 1, 'title': 'c'}, {'pid': 2, 'title': 'b'}, {'pid': 3, 'title': 'a'}]
    print(type(unsortedPosts))
    print(posts)
    sortedPosts = sorted(posts, key=lambda elem: elem['title'].lower())
    print(sortedPosts)
{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}

<p>Please see the following questions on how to use Platform 106!</p>

<div class="typeform-widget" data-url="https://metrohacks1.typeform.com/to/h65hED" data-transparency="100" data-hide-headers=true data-hide-footer=true style="width: 50%; height: 450px;"></div> 
<script> 
(function() { 
    var qs,js,q,s,d=document, gi=d.getElementById, ce=d.createElement, gt=d.getElementsByTagName, id="typef_orm", b="https://embed.typeform.com/"; 
    if(!gi.call(d,id)) { 
        js=ce.call(d,"script"); 
        js.id=id; 
        js.src=b+"embed.js"; 
        q=gt.call(d,"script")[0]; 
        q.parentNode.insertBefore(js,q) 
    } 
})() 
</script> 
<div style="font-family: Sans-Serif;font-size: 12px;color: #999;opacity: 0.5; padding-top: 5px;"> powered by <a href="https://admin.typeform.com/signup?utm_campaign=h65hED&utm_source=typeform.com-5978466-Pro&utm_medium=typeform&utm_content=typeform-embedded-poweredbytypeform&utm_term=EN" style="color: #999" target="_blank">Typeform</a> </div>
<br>

<p>We always appreciate feedback, so please take a moment to tell us how we can make our app better for you!</p>

<div class="typeform-widget" data-url="https://metrohacks1.typeform.com/to/WrCrax" data-transparency="100" data-hide-headers=true data-hide-footer=true style="width: 50%; height: 450px;"></div> 
<script> (function() { 
    var qs,js,q,s,d=document, gi=d.getElementById, ce=d.createElement, gt=d.getElementsByTagName, id="typef_orm", b="https://embed.typeform.com/"; 
    if(!gi.call(d,id)) { 
        js=ce.call(d,"script"); 
        js.id=id; js.src=b+"embed.js"; 
        q=gt.call(d,"script")[0]; 
        q.parentNode.insertBefore(js,q) 
    } 
})() 
</script> 
<div style="font-family: Sans-Serif;font-size: 12px;color: #999;opacity: 0.5; padding-top: 5px;"> powered by <a href="https://admin.typeform.com/signup?utm_campaign=WrCrax&utm_source=typeform.com-5978466-Pro&utm_medium=typeform&utm_content=typeform-embedded-poweredbytypeform&utm_term=EN" style="color: #999" target="_blank">Typeform</a> </div>

{% endblock %}<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="author" content="Shrunothra">
        <title>{{title}}</title>
        <link rel="stylesheet" href="{{url_for('static',filename='style.css')}}" type="text/css" />

        {% block headstuff %}
        <ul class = "banner header">
            <li><a href= "{{ url_for('home') }}">Home</a></li>
            {% if logged_in %}
            <li><a href = "{{ url_for('generalFeed') }}">General Feed</a></li>
            <li><a href = "{{ url_for('tagsList') }}">Tags List</a></li>
            <li><a href = "{{ url_for('createPost') }}">Create Event</a></li>
            <li><a href = "{{ url_for('FAQ') }}">FAQ</a></li>
            <li class = "banner-tab-right"><a href = "{{ url_for('logout') }}"> Logout </a></li>
            <li class = "banner-tab-right"><a href = "{{ url_for('userPortal') }}">User Portal</a></li>
            {% else %}
            <li><a href = "{{ url_for('login') }}" > Login </a></li>
            {% endif %}
        </ul>
        {% endblock %}
    </head>
    <body>
        <h1>{{title}}</h1>
        
        {% with messages = get_flashed_messages() %}
            {% if messages %}
                <div id="messages">
                {% for msg in messages %}
                    <p>{{msg}}</p>
                {% endfor %}
                </div>
            {% endif %}
        {% endwith %}
        
        {% block content %}
        {% endblock %}
        
        <script src="https://code.jquery.com/jquery.js"></script>
        
        {% block jquery_scripts %}
        <script>
        console.log('jQuery loaded');
        </script>
        {% endblock %}
        
    </body>
    <footer>
        {% block footer %}
        <br> &copy; 2019  
        {% endblock %}
    </footer>
</html>{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
 
<p>Fill out this form to insert an event post:</p>

<form method="POST" action="" enctype="multipart/form-data">

    <fieldset>
    <legend>Event Info</legend>
        <table>
        <tr><td><label for="post-title" accesskey="t">Event Name:</label></td>
            <td><input type="text" name="post-title" id="post-title" value="{{ post.title if post else '' }}"></td></tr>
        <tr><td><label for="post-content" accesskey="c">Description:</label></td>
            <td><input type="text" name="post-content" id="post-content" value="{{ post.content if post else '' }}"></td></tr>
        <tr><td><label for="post-location" accesskey="l">Location:</label></td>
            <td><input type="text" name="post-location" id="post-location" value="{{ post.location if post else '' }}"></td></tr>
        <tr><td><label for="post-eventdate" accesskey="d">Date:</label></td>
            <td><input type="date" name="post-eventdate" id="post-eventdate" minDate = now() value="{{ post.event_date if post else '' }}"></td></tr>
        <tr><td><label for="post-eventtime" accesskey="t">Time:</label></td>
            <td><input type="time" name="post-eventtime" id="post-eventtime" TZD = "EST" value="{{ post.event_time if post else '' }}"></td></tr>
        <tr><td><label for="post-picture" accesskey="p">Photo:</label></td>
            <td><input type="file" name="post-picture" id="post-picture" ></td></tr>
        <tr><td><label for="post-tags" accesskey="t">Tags:</label></td>
            <td><input placeholder="{{ '' if post else 'tag1,tag2' }}"type="text" name="post-tags" id="post-tags" value="{{ post.tags if post else '' }}"></td></tr>
        </table>
    </fieldset>

    <p> <input type='submit' value='Post Event'> </p>

</form>
{% endblock %}

{% block jquery_scripts %}
<!--This is to restrict the user from choosing dates that are in the past.-->
<!--The minimum date they can choose is today.-->
<script>
    var now = new Date(),
    minDate = now.toISOString().substring(0,10);

    $('#post-eventdate').prop('min', minDate);
</script>
{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
    
    <form id="advancedSearch" method="POST" action={{ url_for("advancedSearch") }}>
        <label for="searchterm">Title: 
        <input id="searchterm" placeholder="Search by keyword!" name="searchterm"></label>
        <label for="searchtags">Tags: 
        <input id="searchtags" placeholder="Search by tag!" name="searchtags"/>
        </label>
        <button id="searchbutton" type="submit" name="submit" value="Search">Search</button>
    </form>
    <br>
    
    {% if posts %}
    <div id="posts-list">
    {% for post in posts %}
    <div id="post-item" class="card">
        <div class="imagecontainer">
            <img src="{{ url_for('pic',pid=post.pid) }}" alt="" width="50%" class="cardimg" >
        </div>
        <div id="cardContent">
            <h1 class="title"><a href="{{ url_for('displayPost',pid=post.pid) }}">{{ post.title }}</a></h1>
            
            <p class="location"><b>Location: </b>{{ post.location }}</p>
            <!--This code uses jinja to highlight dates in red for events happening tomorrow.-->
            {% if post.tomorrow == "1" %}
                <p class="event_date"><font color = "red"><b>Date: </b>{{ post.event_date }}</font></p>
            {% else %}
                <p class="event_date"><b>Date: </b>{{ post.event_date }}</p>
            {% endif %}
            
            <p class="event_time"><b>Time: </b>{{ post.event_time }}</p>
            <p class="tags"><b>Tags: </b>
                {% for tag in post.tags %}
                <a href="{{ url_for('searchTag',tag=tag) }}">{{ tag }}</a> 
                {% endfor %}
            </p>
            <p class="post_author"><b>Author: </b>{{ post.author }}</p>
            <p>
                {% if logged_in %}
                <form method="post" action="{{ url_for('starAjax') }}">
                    <label class="pid"><input type="hidden" name="pid" class="pid" value="{{ post.pid }}"></label>
                    <label class="starred"><input type="hidden" name="starred" class="starred" value="{{ post.starred }}"></label>
                    <label class ="star-event">
                        <input type="button" name="star-event" value="{{'Starred -- Click to unstar' if post.starred == '1' else 'Star the Event'}}">
                    </label>
                </form>
                {% endif %}
            </p>
        </div>
    </div>
    {% endfor %}
    </div>
    {% endif %}

{% endblock %}

{% block jquery_scripts %}
<script src="{{url_for('static',filename='starEvent.js')}}"></script>
<script>
    var star_URL = "{{ url_for('starAjax') }}";
</script>

{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}

<h2>Welcome to Platform 106!</h2>
{% if logged_in %}
<p>Please use the tabs above to interact with our database.</p>
{% else %}
<p>Please log in to use the platform.</p>
{% endif %}

<form id="basicSearch" method="POST" action="{{ url_for("basicSearch") }}">
    <label for="searchterm"><input id="searchterm" placeholder="Search" name="searchterm"/></label>
    <button id="searchbutton" type="submit" name="submit" value="Search">Search</button>
</form>
    
<br>

<p><b>Featured Events! See what Wellesley students are most interested in!</b></p>

{% if featuredEvents %}
<div id="posts-list">
{% for post in featuredEvents %}
<div id="post-item" class="card">
    <div class="imagecontainer">
        <img src="{{ url_for('pic',pid=post.pid) }}" alt="" width="50%" class="cardimg" >
    </div>
    <div id="cardContent">
        <h1 class="title"><a href="{{ url_for('displayPost',pid=post.pid) }}">{{ post.title }}</a></h1>
        
        <p class="location"><b>Location: </b>{{ post.location }}</p>
        <p class="event_date"><b>Date: </b>{{ post.event_date }}</p>
        <p class="event_time"><b>Time: </b>{{ post.event_time }}</p>
        <p class="tags"><b>Tags: </b>
            {% for tag in post.tags %}
            <a href="{{ url_for('searchTag',tag=tag) }}">{{ tag }}</a> 
            {% endfor %}
        </p>
        <p class="post_author"><b>Author: </b>{{ post.author }}</p>
        <p>
            {% if logged_in %}
            <form method="post" action="{{ url_for('starAjax') }}">
                <label class="pid"><input type="hidden" name="pid" class="pid" value="{{ post.pid }}"></label>
                <label class="starred"><input type="hidden" name="starred" class="starred" value="{{ post.starred }}"></label>
                <label class ="star-event">
                    <input type="button" name="star-event" value="{{'Starred -- Click to unstar' if post.starred == '1' else 'Star the Event'}}">
                </label>
            </form>
            {% endif %}
        </p>
    </div>
</div>
{% endfor %}
</div>
{% endif %}

{% endblock %}

{% block jquery_scripts %}
<script src="{{url_for('static',filename='starEvent.js')}}"></script>
<script>
    
    var star_URL = "{{ url_for('starAjax') }}";

</script>

{% endblock %}{% extends "base.html" %}

   {# <!--wellesley drone video -->    
    <!--<video autoplay muted loop id="myVideo">-->
    <!--    <source src="../static/wellesleyminclip.mp4" type="video/mp4">-->
    <!--</video>-->

    <!--<script>-->
    <!--var video = document.getElementById("myVideo");-->
    <!--video.play();-->
    <!--</script>-->
    #}
    
{# replaces default content block #}
{% block content %}

<p>Please login using your Wellesley account information:</p>
  
 
<form id="joinform" style="display: none;" action="{{url_for('join')}}" method="post">
    <h2>Join</h2>
    <p><label for="username_reg">Username: <input id="username_reg" type="text" name="username" required pattern="^\w+$"></label></p>
    <p><label for="password_reg">Password: <input id="password_reg" type="password" name="password1" required></label></p>
    <p><label for="password2_reg">Password again: <input id="password2_reg" type="password" name="password2" required></label></p>
    <p>
        <input type="submit" name="register-btn" class="login" id="register-btn" value="Register">
        <input type="submit" name="register2login" class="login" id="register2login" value="I have an account">
        </p>
</form>

    
<form id="loginform" style="display: block;" action="{{url_for('loginAction')}}" method="post">
    <h2>Login</h2>
    <p><label for="username_login">Username: <input id="username_login" type="text" name="username" required pattern="^\w+$"></label></p>
    <p><label for="password_login">Password: <input id="username_login" type="password" name="password" required></label></p>
    <p><input type="submit" name="login-btn" class="login" id="login-btn" value="Login as User">
        <input type="submit" name="login-btn" class="login" id="admin-btn" value="Login as Admin">
        <input type="" name="login2register" class="login" id="login2register" value="I don't have an account">
        </p>
</form>


{% endblock %}
    

{% block jquery_scripts %}
<script>

/* global $ */

$("#joinform").on('submit', function (event) {
     var pw1 = $(this).find('[name=password1]').val();
     var pw2 = $(this).find('[name=password2]').val();
     if( pw1 != pw2 ) {
         alert("passwords don't match");
     }
});

// event handler to switch from login mode to register
$("#login2register").on('click',function(event){
    event.preventDefault();
    $("#joinform").show();
    $("#loginform").hide();
});

// event handler to switch from register mode to login
$("#register2login").on('click',function(event){
    event.preventDefault();
    $("#loginform").show();
    $("#joinform").hide();
});

</script>

{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
{% if post %} 
<h3>{{ post.title }}</h3>
<p>Created at {{ post.time_created }} by {{ post.author }}
    <ul class="post-buttons">
    <li>{% if isAuthor or isAdmin %}
    <a style="padding:0px; padding-right:10px;" href="{{ url_for('updatePost',pid=post.pid) }}">
        <button class="edit-post" type="button" >Edit the Post</button>
    </a>
    {% endif %}</li>
    
    <li>{% if logged_in %}
    <form method="post" action="{{ url_for('starAjax') }}">
        <label class="pid"><input type="hidden" name="pid" class="pid" value="{{ post.pid }}"></label>
        <label class="starred"><input type="hidden" name="starred" class="starred" value="{{ post.starred }}"></label>
        <label class ="star-event">
            <input type="button" name="star-event" value="{{'Starred -- Click to unstar' if post.starred == '1' else 'Star the Event'}}">
        </label>
    </form>
    {% endif %}</li>
    </ul>
    
    
</p>

{# double check if picture exists, if not then display an empty string #}
<p><img src="{{ url_for('pic',pid=post.pid) }}" alt="" width="50%" ></p>

<p><b>Description:</b> {{ post.content }}</p>
<p><b>Location:</b> {{ post.location }}</p>
<p><b>Event date:</b> {{ post.event_date }}</p>
<p><b>Event time:</b> {{ post.event_time }}</p>
<p class = "tags"><b>Tags:</b>
    {% for tag in post.tags %}
    <a href="{{ url_for('searchTag',tag=tag) }}">{{ tag }}</a> 
    {% endfor %}
</p>
{% if logged_in %}
<p><b>Contact Author: </b><a href="mailto:{{authorEmail}}?subject=Question Regarding {{post.title}}">{{authorEmail}}</a></p>
{% endif %}

{% endif %}


{% endblock %}

{% block jquery_scripts %}
<script src="{{url_for('static',filename='starEvent.js')}}"></script>
<script>
    var star_URL = "{{ url_for('starAjax') }}";
    
</script>
{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
 

    <form id="tagsSearch" method="POST" action={{ url_for("tagsSearch") }}>
        <label class="tagsSearch">Search Tags: 
        <input id="searchtags" placeholder="Enter a tag!" name="searchtags" onkeyup="myFunction()"/>
        </label>
        <button id="searchbutton" type="submit" name="submit" value="Search">Search</button>
    </form>
    <br>
    <table id="tags-list"><thead>
        <tr>
            <th>Tag Name</th>
            <th>Number of Posts</th>
            <th>Number of Followers</th>
            <th>Follow Status</th>
            {% if isAdmin %}
            <th>Delete Tag</th>
            {% endif %}
        </tr>
        {% if tags %}
        {% for tag in tags %}
        <tr data-tid={{ tag.tid }}>
            <td class="tag_name"><a href="{{ url_for('searchTag',tag=tag.tag_name) }}">{{ tag.tag_name }}</a></td>
            <td class="num_posts">{{ tag.num_posts }}</td>
            <td class="num_followers">{{ tag.num_followers }}</td>
            <td>
                <form method="post" action="{{ url_for('followAjax') }}">
                    <label class="tid"><input type="hidden" name="tid" class="tid" value="{{ tag.tid }}"></label>
                    <label class="followed"><input type="hidden" name="followed" class="followed" value="{{ tag.followed }}"></label>
                    <label class = "follow-tag">
                        <input type="button" name="follow-tag" value="{{'Followed -- Click to unfollow' if tag.followed == '1' else 'Follow the Tag'}}">
                    </label>
                </form>
            </td>
            {% if isAdmin %}
            <td>
                <form method="post" action="{{ url_for('deleteTag',tid=tag.tid) }}">
                    <label class = "delete-tag">
                        <input type="submit" name="delete-tag" value="Delete">
                    </label>
                </form>
            </td>
            {% endif %}
        </tr>
        {% endfor %}
        {% endif %}
        
    </table>

{% endblock %}

{% block jquery_scripts %}
<script src="{{url_for('static',filename='followTag.js')}}"></script>
<script>
    var follow_URL = "{{ url_for('followAjax') }}";
</script>

<script>
/* Function that display search results dynamically */
function myFunction() {
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("searchtags");
  filter = input.value.toUpperCase();
  table = document.getElementById("tags-list");
  tr = table.getElementsByTagName("tr");
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[0];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }       
  }
}
</script>

{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
 
<p>Fill out this form to UPDATE an event post:</p>
    <form method=POST action={{ url_for("updatePost",pid=post.pid) }} enctype="multipart/form-data">
        
    <fieldset>
    <legend>Event Info</legend>
        <table>
        <tr><td><label for="post-title" accesskey="t">Event Name:</label></td>
            <td><input type="text" name="post-title" id="post-title" value="{{ post.title }}"></td></tr>
        <tr><td><label for="post-content" accesskey="c">Description:</label></td>
            <td><input type="text" name="post-content" id="post-content" value="{{ post.content }}"></td></tr>
        <tr><td><label for="post-location" accesskey="l">Location:</label></td>
            <td><input type="text" name="post-location" id="post-location" value="{{ post.location }}"></td></tr>
        <tr><td><label for="post-eventdate" accesskey="d">Date:</label></td>
            <td><input type="date" name="post-eventdate" id="post-eventdate" minDate = now() value="{{ post.event_date }}"></td></tr>
        <tr><td><label for="post-eventtime" accesskey="t">Time:</label></td>
            <td><input type="time" name="post-eventtime" id="post-eventtime" value="{{ post.event_time }}"></td></tr>
        <tr><td><label for="post-picture" accesskey="p">Photo:</label></td>
            <td><input type="file" name="post-picture" id="post-picture" ></td>
            <td><img src="{{ url_for('pic',pid=post.pid) }}" alt="" width="10%" ></td></tr>
        <tr><td><label for="post-tags" accesskey="t">Tags:</label></td>
            <td><input type="text" name="post-tags" id="post-tags" value="{{ post.tags }}"></td></tr>
        </table>
        
    </fieldset>

        <p> <input type="submit" name="submit" value="update">
        <input type="submit" name="submit" value="delete"> </p>

    </form>
{% endblock %}
{% block jquery_scripts %}
<!--This is to restrict the user from choosing dates that are in the past.-->
<!--The minimum date they can choose is today.-->
<script>
    var now = new Date(),
    minDate = now.toISOString().substring(0,10);

    $('#post-eventdate').prop('min', minDate);
</script>
{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
<a href="{{ url_for('userPortal') }}">Back to User Portal</a>
 
<p>Fill out this form to UPDATE your contact information for event notifications:</p>
    <form method=POST action={{ url_for("updateProfile") }}>
        
    <fieldset>
        <table>
        <tr><td><label for="phoneNum">Phone Number:</label></td>
            <td><input type="number" name="phoneNum" id="phoneNum" value="{{ num }}"></td></tr>
        <tr><td><label for="email">Wellesley Email Address:</label></td>
            <td><input type="email" name="email" id="email" value="{{ email }}"></td></tr>
        </table>
        
    </fieldset>

        <p> <input type="submit" name="submit" value="update"></p>

    </form>
{% endblock %}{% extends "base.html" %}
 
{# replaces default content block #}
{% block content %}
<h3 style="color:blue;">Hello, {{ username }}!</h3> 
{% if isAdmin %}
<h3 style="color:red;">Logged in as Admin</h3>
{% endif %}

<h4> <a href=" {{url_for('updateProfile')}} ">Profile and Preferences</a> </h4>
<h4 style="text-align:center;"> Manage my Starred Posts </h4>
<br>

     <table id="posts-list">
        <tr>
            <th>Title</th>
            <th>Location</th>
            <th>Date</th>
            <th>Time</th>
            <th>Tags</th>
            <th>Author</th>
            <th>Star Status</th>
        </tr>
        {% for star in stars %}
        <tr data-pid={{ star.pid }}>
            <td class="title"><a href="{{ url_for('displayPost',pid=star.pid) }}">{{ star.title }}</a></td> 
            <td class="location">{{ star.location }}</td>
            <td class="event_date">{{ star.event_date }}</td>
            <td class="event_time">{{ star.event_time }}</td>
            <td class="tags">
                {% for tag in star.tags %}
                <a href="{{ url_for('searchTag',tag=tag) }}">{{ tag }}</a> 
                {% endfor %}
            </td>
            <td class="post_author">{{ star.author }}</td>
            <td>
                <form method="post" action="{{ url_for('starAjax') }}">
                    <label class="pid"><input type="hidden" name="pid" class="pid" value="{{ star.pid }}"></label>
                    <label class="starred"><input type="hidden" name="starred" class="starred" value="{{ star.starred }}"></label>
                    <label class = "star-event">
                        <input type="button" name="star-event" value="{{'Starred -- Click to unstar' if star.starred == '1' else 'Star the Event'}}">
                    </label>
                </form>
            </td>
        </tr>
        {% endfor %}
    </table>
<br>
<h4 style="text-align:center;"> Manage my Followed Tags </h4>
<br>
<table id="tags-list">
        <tr>
            <th>Tag Name</th>
            <th>Number of Posts</th>
            <th>Number of Followers</th>
            <th>Follow Status</th>
            
        </tr>
        {% for follow in follows %}
        <tr data-tid={{ follow.tid }}>
            <td class="tag_name"><a href="{{ url_for('searchTag',tag=follow.tag_name) }}">{{ follow.tag_name }}</a></td>
            <td class="num_posts">{{ follow.num_posts }}</td>
            <td class="num_followers">{{ follow.num_followers }}</td>
            <td>
                <form method="post" action="{{ url_for('followAjax') }}">
                    <label class="tid"><input type="hidden" name="tid" class="tid" value="{{ follow.tid }}"></label>
                    <label class="followed"><input type="hidden" name="followed" class="followed" value="{{ follow.followed }}"></label>
                    <label class = "follow-tag">
                        <input type="button" name="follow-tag" value="{{'Followed -- Click to unfollow' if follow.followed == '1' else 'Follow the Tag'}}">
                    </label>
                </form>
            </td>
        </tr>
        {% endfor %}

    </table>
<br>
<h4 style="text-align:center;"> Manage my Created Posts </h4>
<br>

<div id="posts-list">
{% for post in posts %}
<div id="post-item" class="card">
    <div class="imagecontainer">
        <img src="{{ url_for('pic',pid=post.pid) }}" alt="" width="50%" class="cardimg" >
    </div>
    <div id="cardContent">
        <h1 class="title"><a href="{{ url_for('displayPost',pid=post.pid) }}">{{ post.title }}</a></h1>
        
        <p class="location"><b>Location: </b>{{ post.location }}</p>
        <p class="event_date"><b>Date: </b>{{ post.event_date }}</p>
        <p class="event_time"><b>Time: </b>{{ post.event_time }}</p>
        <p>
            <a href="{{ url_for('updatePost',pid=post.pid) }}">
                    <button class="edit-post" type="button" >Edit the Post</button>
            </a>
        </p>
    </div>
</div>
{% endfor %}
</div>

{% endblock %}

{% block jquery_scripts %}
<script src="{{url_for('static',filename='followTag.js')}}"></script>
<script src="{{url_for('static',filename='starEvent.js')}}"></script>

<script>
    var star_URL = "{{ url_for('starAjax') }}";
    var follow_URL = "{{ url_for('followAjax') }}";
</script>
{% endblock %}$("#tags-list").on("click", "label.follow-tag", function (event) {
    event.preventDefault();
    var followed = $(event.target).closest("form").find("input[name='followed']").val();
    console.log("follow: " + followed);
    var tid = $(event.target).closest("form").find("input[name='tid']").val();
    var button = $(this).find("input[name=follow-tag]");
    sendFollow(tid,followed,button);
});

function sendFollow(tid,followed,button) {
    console.log("Sending "+tid +" and " + followed +" to the back end");
    $.post(follow_URL,{'error':false, 'tid': tid, 'followed': followed},
    function(data,status){
        updateFollow(data,button);
    },'json');
}

function updateFollow(obj,button) {
    console.log(obj);
    if(obj.error) {
        // $("#errors").empty().html('Error: '+obj.err);
        alert(obj.err);
    } else {
        console.log("changing follow status to be " + obj.followed)
        if (obj.followed == "1") {
            button.val('Followed -- Click to unfollow');
        } else {
            button.val('Follow the Tag');
        }
        button.closest("form").find("input[name=followed]").val(obj.followed);
        button.closest("[data-tid]").find(".num_followers").text(obj.numFollows);
    }
}$("#posts-list").on("click", "label.star-event", function (event) {
    event.preventDefault();
    var starred = $(event.target).closest("form").find("input[name='starred']").val();
    var pid = $(event.target).closest("form").find("input[name='pid']").val();
    var button = $(this).find("input[name=star-event]");
    sendStar(pid,starred,button);
});

function sendStar(pid,starred,button) {
    console.log("Sending "+pid +" and " + starred +" to the back end");
    $.post(star_URL,{'error':false, 'pid': pid, 'starred': starred},
    function(data,status){
        updateStar(data,button);
    },'json');
}

function updateStar(obj,button) {
    console.log(obj);
    if(obj.error) {
        alert(obj.err);
    } else {
        console.log("changing star status to be " + obj.starred)
        if (obj.starred == "1") {
            button.val('Starred -- Click to unstar');
        } else {
            button.val('Star the Event');
        }
        button.closest("form").find("input[name=starred]").val(obj.starred);
    }
}body {
    font-family: Sans-Serif;
}

h1 {
    color: navy;
    font-family: Sans-Serif;
    margin: 5px;
}

.subhead{
    font-weight: bolder;
}

ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: navy;
}

.post-buttons {
  background-color: white;
  text-align: center;
  display: inline-block;
}

.banner-tab-right {
  float: right;
}

li {
  float: left;
}

li a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  font-weight: bold;
}

li a:hover {
  background-color: lightskyblue;
}

table {
  border-collapse: collapse;
  width: 100%;
  color: navy;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even){background-color: #f2f2f2}

th {
  background-color: navy;
  color: white;
}

.edit-post, input {
  width: 50;
  padding: 8px 20px;
  margin: 0px 0;
  /*border: 1px solid navy;*/
  background-color: navy;
  color: white;
  font-size: 16px;
}

input:hover, button:hover {
  background-color: lightskyblue;
}

.login, button {
  background-color: navy;
  border: none;
  color: white;
  padding: 8px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 0;
  cursor: pointer;
}

p {
  color: navy;
  margin: 5px;
}

#messages {
  border: 3px solid red;
  color: red;
  font-size: large;
	font-style: italic;
	padding-left: 30px;
}


.card {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  min-width: 300px;
  max-width: 300px;
  margin: 15px;
  display: inline-block;
  text-align: center;
  font-family: Tahoma;
}

cardContent {
  display: inline-block;
  vertical-align: middle;
  min-height: 300px;
  max-height: 300px;
}

.imagecontainer {
  width: 300px; 
  height: 300px; 
  overflow: hidden;
}

img.cardimg {
  width: 100%;
  display: inline-block;
  vertical-align: middle;
}

.title {
  color: navy;
  font-size: 18px;
}

/*FAQS*/

.faq {
  padding: 5px;
}

.faq_question {
    margin: 0px;
    padding: 0px 0px 5px 0px;
    display: inline-block;
    cursor: pointer;
    font-weight: bold;
}
 
.faq_answer_container {
    height: 0px;
    overflow: hidden;
    padding: 0px;
}
